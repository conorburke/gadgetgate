### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


scalar DateTime

type Depot {
  address_1: String!
  address_2: String
  city: String!
  id: ID!
  owner: User!
  province: String!
  tools: [Tool!]!
  zipcode: String!
}

input DepotCreateInput {
  address_1: String!
  address_2: String
  city: String!
  id: ID
  owner: UserCreateOneWithoutOwnerInput!
  province: String!
  tools: ToolCreateManyWithoutToolsInput
  zipcode: String!
}

input DepotCreateManyWithoutDepotsInput {
  connect: [DepotWhereUniqueInput!]
  create: [DepotCreateWithoutOwnerInput!]
}

input DepotCreateOneWithoutDepotInput {
  connect: DepotWhereUniqueInput
  create: DepotCreateWithoutToolsInput
}

input DepotCreateWithoutOwnerInput {
  address_1: String!
  address_2: String
  city: String!
  id: ID
  province: String!
  tools: ToolCreateManyWithoutToolsInput
  zipcode: String!
}

input DepotCreateWithoutToolsInput {
  address_1: String!
  address_2: String
  city: String!
  id: ID
  owner: UserCreateOneWithoutOwnerInput!
  province: String!
  zipcode: String!
}

input DepotWhereUniqueInput {
  id: ID
}

type Email {
  address: String!
  id: ID!
  owner: User!
  purpose: String
}

input EmailCreateManyWithoutEmailsInput {
  connect: [EmailWhereUniqueInput!]
  create: [EmailCreateWithoutOwnerInput!]
}

input EmailCreateWithoutOwnerInput {
  address: String!
  id: ID
  purpose: String
}

input EmailWhereUniqueInput {
  id: ID
}

type Mutation {
  createOneDepot(data: DepotCreateInput!): Depot!
  createOneTool(data: ToolCreateInput!): Tool!
  createOneUser(data: UserCreateInput!): User!
}

type Phone {
  id: ID!
  num: String!
  owner: User!
  purpose: String
}

input PhoneCreateManyWithoutPhonesInput {
  connect: [PhoneWhereUniqueInput!]
  create: [PhoneCreateWithoutOwnerInput!]
}

input PhoneCreateWithoutOwnerInput {
  id: ID
  num: String!
  purpose: String
}

input PhoneWhereUniqueInput {
  id: ID
}

type Query {
  depots(after: ID, before: ID, first: Int, last: Int, skip: Int): [Depot!]!
  tools(after: ID, before: ID, first: Int, last: Int, skip: Int): [Tool!]!
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
}

type Rating {
  comment: String
  id: ID!
  kind: RatingType!
  point: Int!
  user: User!
}

input RatingCreateManyWithoutRatingsInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutUserInput!]
}

input RatingCreateWithoutUserInput {
  comment: String
  id: ID
  kind: RatingType!
  point: Int!
}

enum RatingType {
  Loaner
  Renter
}

input RatingWhereUniqueInput {
  id: ID
}

input RentedToolCreateManyWithoutRentedToolsInput {
  connect: [RentedToolWhereUniqueInput!]
  create: [RentedToolCreateWithoutToolInput!]
}

input RentedToolCreateWithoutToolInput {
  end_date: DateTime!
  id: ID
  renter: UserCreateOneWithoutRenterInput!
  start_date: DateTime!
}

input RentedToolWhereUniqueInput {
  id: ID
}

type Tool {
  category: String!
  depot: Depot!
  description: String!
  id: ID!
  pictures: [ToolPicture!]!
  price: Float!
  title: String!
}

input ToolCreateInput {
  category: String!
  depot: DepotCreateOneWithoutDepotInput!
  description: String!
  id: ID
  pictures: ToolPictureCreateManyWithoutPicturesInput
  price: Float!
  rentedTools: RentedToolCreateManyWithoutRentedToolsInput
  title: String!
}

input ToolCreateManyWithoutToolsInput {
  connect: [ToolWhereUniqueInput!]
  create: [ToolCreateWithoutDepotInput!]
}

input ToolCreateWithoutDepotInput {
  category: String!
  description: String!
  id: ID
  pictures: ToolPictureCreateManyWithoutPicturesInput
  price: Float!
  rentedTools: RentedToolCreateManyWithoutRentedToolsInput
  title: String!
}

type ToolPicture {
  description: String
  id: ID!
  image: String!
  tool: Tool!
}

input ToolPictureCreateManyWithoutPicturesInput {
  connect: [ToolPictureWhereUniqueInput!]
  create: [ToolPictureCreateWithoutToolInput!]
}

input ToolPictureCreateWithoutToolInput {
  description: String
  id: ID
  image: String!
}

input ToolPictureWhereUniqueInput {
  id: ID
}

input ToolWhereUniqueInput {
  id: ID
}

type User {
  birth_date: DateTime
  depots: [Depot!]!
  email: String!
  emails: [Email!]!
  first_name: String!
  id: ID!
  last_name: String!
  phones: [Phone!]!
  ratings: [Rating!]!
}

input UserCreateInput {
  birth_date: DateTime
  depots: DepotCreateManyWithoutDepotsInput
  email: String!
  emails: EmailCreateManyWithoutEmailsInput
  first_name: String!
  id: ID
  last_name: String!
  password_hash: String!
  phones: PhoneCreateManyWithoutPhonesInput
  ratings: RatingCreateManyWithoutRatingsInput
  rentedTools: RentedToolCreateManyWithoutRentedToolsInput
}

input UserCreateOneWithoutOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDepotsInput
}

input UserCreateOneWithoutRenterInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRentedToolsInput
}

input UserCreateWithoutDepotsInput {
  birth_date: DateTime
  email: String!
  emails: EmailCreateManyWithoutEmailsInput
  first_name: String!
  id: ID
  last_name: String!
  password_hash: String!
  phones: PhoneCreateManyWithoutPhonesInput
  ratings: RatingCreateManyWithoutRatingsInput
  rentedTools: RentedToolCreateManyWithoutRentedToolsInput
}

input UserCreateWithoutRentedToolsInput {
  birth_date: DateTime
  depots: DepotCreateManyWithoutDepotsInput
  email: String!
  emails: EmailCreateManyWithoutEmailsInput
  first_name: String!
  id: ID
  last_name: String!
  password_hash: String!
  phones: PhoneCreateManyWithoutPhonesInput
  ratings: RatingCreateManyWithoutRatingsInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
